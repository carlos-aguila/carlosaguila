

name: Build and deploy Node.js app to Azure Web App - atl47

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: npm install, build, and test
        run: |
          npm install
          npm run build --if-present
          npm run test --if-present

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: node-app
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: node-app

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'atl47'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_E2160C3FCA5C474BA832A67621436E41 }}
          package: .
<Project>

  <Import Project="eng\Common.props" />

  <PropertyGroup>
    <!-- $(RepoRoot) is normally set globally and Arcade overrides it to ensure a trailing slash. -->
    <RepoRoot Condition=" '$(RepoRoot)' == '' OR !HasTrailingSlash('$(RepoRoot)') ">$(MSBuildThisFileDirectory)</RepoRoot>

    <RepositoryUrl>https://github.com/dotnet/aspnetcore</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
  </PropertyGroup>

  <PropertyGroup>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>latest</AnalysisLevel>
    <AnalysisMode>Default</AnalysisMode>
  </PropertyGroup>

  <!-- Defines project type conventions. -->
  <PropertyGroup>
    <RepoRelativeProjectDir>$([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectDirectory)))</RepoRelativeProjectDir>

    <IsBenchmarkProject Condition=" $(MSBuildProjectName.EndsWith('.Performance')) OR
        $(RepoRelativeProjectDir.Contains('perf')) OR
        $(RepoRelativeProjectDir.Contains('benchmarkapps')) ">true</IsBenchmarkProject>
    <IsMicrobenchmarksProject Condition=" $(MSBuildProjectName.EndsWith('.Microbenchmarks')) ">true</IsMicrobenchmarksProject>
    <IsSpecificationTestProject Condition="$(MSBuildProjectName.EndsWith('.Specification.Tests'))">true</IsSpecificationTestProject>
    <IsUnitTestProject Condition=" '$(IsUnitTestProject)' == '' ">false</IsUnitTestProject>
    <IsUnitTestProject Condition=" '$(IsSpecificationTestProject)' != 'true' AND
        ( $(MSBuildProjectName.EndsWith('Tests')) OR
          $(MSBuildProjectName.EndsWith('.Test')) OR
          $(MSBuildProjectName.EndsWith('.FunctionalTest')) ) ">true</IsUnitTestProject>
    <IsTestAssetProject Condition=" $(RepoRelativeProjectDir.Contains('testassets')) OR $(MSBuildProjectName.Contains('TestCommon'))">true</IsTestAssetProject>
    <IsSampleProject Condition=" $(RepoRelativeProjectDir.ToUpperInvariant().Contains('SAMPLE')) ">true</IsSampleProject>
    <IsAnalyzersProject Condition="$(MSBuildProjectName.EndsWith('.Analyzers'))">true</IsAnalyzersProject>
    <IsShipping Condition=" '$(IsSampleProject)' == 'true' OR
        '$(IsTestAssetProject)' == 'true' OR
        '$(IsBenchmarkProject)' == 'true' OR
        '$(IsUnitTestProject)' == 'true'">false</IsShipping>

    <!--
      Following logic mimics core-setup approach as well as
      https://github.com/dotnet/arcade/blob/694d59f090b743f894779d04a7ffe11cbaf352e7/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj#L30-L31
      $(DotNetFinalVersionKind) is set globally when doing final aka stable builds. Arcade infrastructure should pick
      up $(IsStableBuild) automatically; property is also used to control prerelease branding.
    -->
    <IsStableBuild>false</IsStableBuild>
    <IsStableBuild Condition=" '$(DotNetFinalVersionKind)' == 'release' ">true</IsStableBuild>

    <!-- Workaround issue with ComponentsAnalyzer throwing for interfaces -->
    <DisableImplicitComponentsAnalyzers>true</DisableImplicitComponentsAnalyzers>
  </PropertyGroup>

  <!-- Disable logging of some task parameters or metadata to reduce binlog size.
       Reenable logging of any particular item by changing the value of the property below to 'false'
     
     The format is as follows:
       DisableLogTaskParameter_[task name]_[parameter name] - Disable logging of a particular parameter
       DisableLogTaskParameterItemMetadata_[task name]_[parameter name] - Disable logging of item metadata of the parameter
  -->
  <PropertyGroup>
    <TrimTaskParameters Condition=" '$(TrimTaskParameters)' == '' ">true</TrimTaskParameters>
    <!-- ItemsToHash is used for incremental building and hashes input properties to a file
         This is not generally useful for day-to-day build debugging. -->
    <DisableLogTaskParameter_Hash_ItemsToHash>$(TrimTaskParameters)</DisableLogTaskParameter_Hash_ItemsToHash>

    <!-- JoinItems takes input ItemGroups. The output ItemGroup is logged. -->
    <DisableLogTaskParameter_JoinItems_Right>$(TrimTaskParameters)</DisableLogTaskParameter_JoinItems_Right>
    <DisableLogTaskParameter_JoinItems_Left>$(TrimTaskParameters)</DisableLogTaskParameter_JoinItems_Left>

    <!-- ConvertToAbsolutePaths - The output parameter (AbsolutePaths) is interesting
         while the input Path is not generally useful. The output itemgroup's metadata
         is not altered by the task. -->
    <DisableLogTaskParameter_ConvertToAbsolutePath_Paths>$(TrimTaskParameters)</DisableLogTaskParameter_ConvertToAbsolutePath_Paths>
    <DisableLogTaskParameterItemMetadata_ConvertToAbsolutePath_Paths>$(TrimTaskParameters)</DisableLogTaskParameterItemMetadata_ConvertToAbsolutePath_Paths>

    <!-- The standard msbuild Copy task does not use Metadata and thus the input/outputs
         item metadata is not relevant -->
     <DisableLogTaskParameterItemMetadata_Copy_SourceFiles>$(TrimTaskParameters)</DisableLogTaskParameterItemMetadata_Copy_SourceFiles>
     <DisableLogTaskParameterItemMetadata_Copy_DestinationFiles>$(TrimTaskParameters)</DisableLogTaskParameterItemMetadata_Copy_DestinationFiles>

     <!-- Reference metadata for GenerateDepsFile, Csc, RAR, etc. are sometimes useful, but extraordinarily large
          when building against a shared framework where the number of input assemblies is very large.
          Avoid logging these by default. -->
     <DisableLogTaskParameterItemMetadata_GenerateDepsFile_ReferenceAssemblies>$(TrimTaskParameters)</DisableLogTaskParameterItemMetadata_GenerateDepsFile_ReferenceAssemblies>
     <DisableLogTaskParameterItemMetadata_GenerateDepsFile_ReferencePaths>$(TrimTaskParameters)</DisableLogTaskParameterItemMetadata_GenerateDepsFile_ReferencePaths>
     <DisableLogTaskParameterItemMetadata_ResolveAssemblyReference_Assemblies>$(TrimTaskParameters)</DisableLogTaskParameterItemMetadata_ResolveAssemblyReference_Assemblies>
     <DisableLogTaskParameterItemMetadata_Csc_References>$(TrimTaskParameters)</DisableLogTaskParameterItemMetadata_Csc_References>
  </PropertyGroup>

  <Import Project="eng\QuarantinedTests.BeforeArcade.props" />
  <Import Project="Sdk.props" Sdk="Microsoft.DotNet.Arcade.Sdk" />
  <Import Project="eng\QuarantinedTests.AfterArcade.props" />

  <PropertyGroup>
    <Product>Microsoft ASP.NET Core</Product>
    <StrongNameKeyId>MicrosoftAspNetCore</StrongNameKeyId>

    <!-- The SPDX name for the source license. See https://spdx.org/licenses/. -->
    <PackageLicenseExpression>MIT</PackageLicenseExpression>

    <!-- Contact email address for NuGet packages and Linux installers. -->
    <MaintainerEmail>nugetaspnet@microsoft.com</MaintainerEmail>

    <PackageProjectUrl>https://asp.net</PackageProjectUrl>
    <NuspecBasePath>$(MSBuildProjectDirectory)</NuspecBasePath>

    <IncludeSymbols>true</IncludeSymbols>
    <DefaultNetFxTargetFramework>net462</DefaultNetFxTargetFramework>
  </PropertyGroup>

  <!-- Warnings and errors -->
  <PropertyGroup>
    <!-- Ensure API docs are available. -->
    <NoWarn>$(NoWarn.Replace('1591', ''))</NoWarn>
    <NoWarn Condition=" '$(BuildingInsideVisualStudio)' == 'true' ">$(NoWarn);0105</NoWarn>

    <!-- For local builds, don't make missing XML docs a fatal build error, but still surface so we have visibility into undocumented APIs. -->
    <WarningsNotAsErrors Condition=" '$(ContinuousIntegrationBuild)' != 'true' ">$(WarningsNotAsErrors);CS1591</WarningsNotAsErrors>

    <!-- xUnit1004 = warns about skipped tests. Make this a non-fatal build warning. -->
    <WarningsNotAsErrors>$(WarningsNotAsErrors);xUnit1004</WarningsNotAsErrors>
  </PropertyGroup>

  <!-- Source code settings -->
  <PropertyGroup>
    <SharedSourceRoot>$(MSBuildThisFileDirectory)src\Shared\</SharedSourceRoot>
    <GoogleTestSubmoduleRoot>$(RepoRoot)src\submodules\googletest\</GoogleTestSubmoduleRoot>

    <!-- Embed source files that are not tracked by the source control manager in the PDB. -->
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
  </PropertyGroup>

  <PropertyGroup>
    <SharedFxName>Microsoft.AspNetCore.App</SharedFxName>
    <SharedFxDescription>Shared Framework for hosting of Microsoft ASP.NET Core applications. It is open source, cross-platform and is supported by Microsoft. We hope you enjoy using it! If you do, please consider joining the active community of developers that are contributing to the project on GitHub ($(RepositoryUrl)). We happily accept issues and PRs.</SharedFxDescription>

    <NETCoreAppFrameworkIdentifier>.NETCoreApp</NETCoreAppFrameworkIdentifier>
    <NETCoreAppFramework>netcoreapp$(AspNetCoreMajorMinorVersion)</NETCoreAppFramework>
    <AspNetCoreAppFrameworkBrandName>ASP.NET Core $(AspNetCoreMajorMinorVersion)</AspNetCoreAppFrameworkBrandName>

    <TargetingPackName>Microsoft.AspNetCore.App.Ref</TargetingPackName>
    <RuntimeInstallerBaseName>aspnetcore-runtime</RuntimeInstallerBaseName>
    <TargetingPackInstallerBaseName>aspnetcore-targeting-pack</TargetingPackInstallerBaseName>

    <!-- This is used to produce targeting pack installers/packages once per major.minor. -->
    <IsTargetingPackBuilding Condition=" '$(DotNetBuildFromSource)' == 'true' ">false</IsTargetingPackBuilding>
    <IsTargetingPackBuilding
        Condition=" '$(IsTargetingPackBuilding)' == '' AND '$(AspNetCorePatchVersion)' != '0' ">false</IsTargetingPackBuilding>
    <IsTargetingPackBuilding Condition=" '$(IsTargetingPackBuilding)' == '' ">true</IsTargetingPackBuilding>

    <!--
      Archives and installers using this prefix are intended for internal use only.
      For example, this .zip is used to handoff bits to partner teams who then incorporate our shared frameworks
      into their own installers.
    -->
    <InternalInstallerBaseName>$(RuntimeInstallerBaseName)-internal</InternalInstallerBaseName>
  </PropertyGroup>

  <!-- Compilation options which apply to all languages. Language-specific options should be set in eng/targets/$(lang).Common.props -->
  <PropertyGroup>
    <BuildArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLowerInvariant())</BuildArchitecture>

    <!-- This defines the list of RIDs supported by the ASP.NET Core shared framework. -->
    <SupportedRuntimeIdentifiers>
      win-x64;
      win-x86;
      win-arm;
      win-arm64;
      osx-x64;
      osx-arm64;
      linux-musl-x64;
      linux-musl-arm;
      linux-musl-arm64;
      linux-x64;
      linux-arm;
      linux-arm64;
      freebsd-x64
    </SupportedRuntimeIdentifiers>

    <!-- Make error messages clickable in VS Code's console -->
    <GenerateFullPaths Condition="'$(VSCODE_CWD)' != '' OR '$(TERM_PROGRAM)' == 'vscode'">true</GenerateFullPaths>

    <!-- Fixes a common error in targets implementing a NoBuild mode. -->
    <BuildProjectReferences Condition=" '$(NoBuild)' == 'true' ">false</BuildProjectReferences>
  </PropertyGroup>

  <!-- Artifacts layout. Keep these values consistent with items defined in eng/Publishing.props. -->
  <PropertyGroup>
    <InstallersOutputPath>$(ArtifactsDir)installers\$(Configuration)\</InstallersOutputPath>
    <SymbolsOutputPath>$(ArtifactsDir)symbols\$(Configuration)\</SymbolsOutputPath>
  </PropertyGroup>

  <!-- Ensure these output paths exist. -->
  <ItemGroup>
    <CreateDirectory Include="$(InstallersOutputPath)" />
    <CreateDirectory Include="$(VisualStudioSetupOutputPath)" />
  </ItemGroup>

  <!-- The location of the local installation of the .NET Core shared framework. -->
  <PropertyGroup>
    <LocalDotNetRoot>$(RepoRoot).dotnet\</LocalDotNetRoot>
    <!-- Override the SDK default and point to local .dotnet folder. -->
    <NetCoreTargetingPackRoot>$(LocalDotNetRoot)packs\</NetCoreTargetingPackRoot>
  </PropertyGroup>

  <Import Project="eng\tools\RepoTasks\RepoTasks.tasks" Condition="'$(MSBuildProjectName)' != 'RepoTasks' AND '$(DesignTimeBuild)' != 'true'" />

  <PropertyGroup>
    <!--
      Disable deterministic source paths in test assets and samples.
      In order for the debugger to find source files when debugging a locally built binary the PDB must contain original, unmapped local paths
    -->
    <DeterministicSourcePaths Condition="'$(IsSampleProject)' == 'true' OR '$(IsTestAssetProject)' == 'true'">false</DeterministicSourcePaths>
    <!-- Projects which reference Microsoft.AspNetCore.Mvc.Testing should import this targets file to ensure dependency .deps.json files are copied into test output. -->
    <MvcTestingTargets>$(MSBuildThisFileDirectory)src\Mvc\Mvc.Testing\src\Microsoft.AspNetCore.Mvc.Testing.targets</MvcTestingTargets>
    <_MvcTestingTasksAssembly>$(ArtifactsBinDir)\Microsoft.AspNetCore.Mvc.Testing.Tasks\$(Configuration)\netstandard2.0\Microsoft.AspNetCore.Mvc.Testing.Tasks.dll</_MvcTestingTasksAssembly>
    <!-- IIS native projects can only be built on Windows for x86 and x64. -->
    <BuildIisNativeProjects Condition=" '$(TargetOsName)' == 'win' AND ('$(TargetArchitecture)' == 'x86' OR '$(TargetArchitecture)' == 'x64') ">true</BuildIisNativeProjects>
    <!-- This property is shared by several projects to layout the AspNetCore.App targeting pack for installers -->
    <TargetingPackLayoutRoot>$(ArtifactsObjDir)TargetingPack.Layout\$(Configuration)\</TargetingPackLayoutRoot>
    <!-- This property is shared by several projects to layout the AspNetCore.App shared framework for installers -->
    <SharedFrameworkLayoutRoot>$(ArtifactsObjDir)SharedFx.Layout\$(Configuration)\$(TargetRuntimeIdentifier)\</SharedFrameworkLayoutRoot>
    <!-- This property points to a folder which includes both Microsoft.NETCore.App and AspNetCore.App. -->
    <RedistSharedFrameworkLayoutRoot>$(ArtifactsObjDir)RedistSharedFx.Layout\$(Configuration)\$(TargetRuntimeIdentifier)\</RedistSharedFrameworkLayoutRoot>

    <ArchiveExtension>.tar.gz</ArchiveExtension>
    <ArchiveExtension Condition="'$(TargetOsName)' == 'win'">.zip</ArchiveExtension>
  </PropertyGroup>

  <Import Project="eng\Workarounds.props" />
  <Import Project="artifacts\bin\GenerateFiles\Directory.Build.props" Condition=" '$(MSBuildProjectName)' != 'GenerateFiles' " />
  <Import Project="eng\Dependencies.props" />
  <Import Project="eng\ProjectReferences.props" />
  <Import Project="eng\SharedFramework.Local.props" />
  <Import Project="eng\SharedFramework.External.props" />
  <Import Project="eng\targets\Cpp.Common.props"  Condition="'$(MSBuildProjectExtension)' == '.vcxproj'" />
  <Import Project="eng\targets\CSharp.Common.props"  Condition="'$(MSBuildProjectExtension)' == '.csproj'" />
  <Import Project="eng\targets\Wix.Common.props"  Condition="'$(MSBuildProjectExtension)' == '.wixproj'" />
  <Import Project="eng\targets\Npm.Common.props"  Condition="'$(MSBuildProjectExtension)' == '.npmproj'" />
  <Import Project="eng\targets\Java.Common.props"  Condition="'$(MSBuildProjectExtension)' == '.javaproj'" />
  <Import Project="eng\targets\Helix.props" Condition="'$(IsTestProject)' == 'true'" />

</Project>
# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js project to Azure Function App - AtlasICE

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '14.x' # set this to the node version to use (supports 8.x, 10.x, 12.x)

jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v2

    - name: Setup Node ${{ env.NODE_VERSION }} Environment
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 'Resolve Project Dependencies Using Npm'
      shell: pwsh
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm install
        npm run build --if-present
        npm run test --if-present
        popd

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: 'AtlasICE'
        slot-name: 'production'
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_29333374a81849d981265f2dde0184e4 }}
        {
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "value": "westeurope"
        },
        "applicationGatewayName": {
            "value": "getaway"
        },
        "tier": {
            "value": "Standard_v2"
        },
        "skuSize": {
            "value": "Standard_v2"
        },
        "capacity": {
            "value": 0
        },
        "subnetName": {
            "value": "default"
        },
        "zones": {
            "value": [
                "3"
            ]
        },
        "publicIpAddressName": {
            "value": "aip"
        },
        "sku": {
            "value": "Standard"
        },
        "allocationMethod": {
            "value": "Static"
        },
        "publicIpZones": {
            "value": [
                "3"
            ]
        },
        "autoScaleMaxCapacity": {
            "value": 10
        }
    }
}

SEP=,
NAME,SUBSCRIPTION,LOCATION,
"agenttoolupgrade-rg","Free Trial","East US 2"
"DefaultResourceGroup-CUS","Free Trial","Central US"
"DefaultResourceGroup-EUS2","Free Trial","East US 2"

SEP=,
NAME,TYPE,LOCATION,
"apiatl","API Management service","Central US"
"ASP-Atlas-81ba","App Service plan","Central US"
"atlapi","Azure Cosmos DB API for MongoDB account","West US"
"Atlas33","Virtual network","West Europe"
"AtlasICE","Function App","Central US"
"AtlasICE","Application Insights","Central US"
"storage35","Storage account","East US"
"string3581321","SQL server","East US"

{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "String"
        },
        "applicationGatewayName": {
            "type": "String"
        },
        "tier": {
            "type": "String"
        },
        "skuSize": {
            "type": "String"
        },
        "capacity": {
            "defaultValue": 2,
            "type": "Int"
        },
        "subnetName": {
            "type": "String"
        },
        "zones": {
            "type": "Array"
        },
        "publicIpAddressName": {
            "type": "String"
        },
        "sku": {
            "type": "String"
        },
        "allocationMethod": {
            "type": "String"
        },
        "publicIpZones": {
            "type": "Array"
        },
        "autoScaleMaxCapacity": {
            "type": "Int"
        }
    },
    "variables": {
        "vnetId": "/subscriptions/ba4f8743-aeed-45f6-a7e5-2ca0a2b186b0/resourceGroups/Atlas/providers/Microsoft.Network/virtualNetworks/Atlas33",
        "publicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses/', parameters('publicIpAddressName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]",
        "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2019-09-01",
            "name": "[parameters('applicationGatewayName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('publicIpAddressName'))]"
            ],
            "tags": {},
            "zones": "[parameters('zones')]",
            "properties": {
                "sku": {
                    "name": "[parameters('skuSize')]",
                    "tier": "[parameters('tier')]"
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGwPublicFrontendIp",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[variables('publicIPRef')]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "port_80",
                        "properties": {
                            "Port": 80
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "backtoback",
                        "properties": {
                            "backendAddresses": []
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "sethttp",
                        "properties": {
                            "Port": 80,
                            "Protocol": "Http",
                            "cookieBasedAffinity": "Disabled",
                            "requestTimeout": 20
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "atlrout",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('applicationGatewayId'), '/frontendIPConfigurations/appGwPublicFrontendIp')]"
                            },
                            "frontendPort": {
                                "id": "[concat(variables('applicationGatewayId'), '/frontendPorts/port_80')]"
                            },
                            "protocol": "Http",
                            "sslCertificate": null
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "rout",
                        "properties": {
                            "RuleType": "Basic",
                            "httpListener": {
                                "id": "[concat(variables('applicationGatewayId'), '/httpListeners/atlrout')]"
                            },
                            "priority": null,
                            "backendAddressPool": {
                                "id": "[concat(variables('applicationGatewayId'), '/backendAddressPools/backtoback')]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(variables('applicationGatewayId'), '/backendHttpSettingsCollection/sethttp')]"
                            }
                        }
                    }
                ],
                "enableHttp2": false,
                "sslCertificates": [],
                "probes": [],
                "autoscaleConfiguration": {
                    "minCapacity": "[parameters('capacity')]",
                    "maxCapacity": "[parameters('autoScaleMaxCapacity')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-08-01",
            "name": "[parameters('publicIpAddressName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('sku')]"
            },
            "zones": "[parameters('publicIpZones')]",
            "properties": {
                "publicIPAllocationMethod": "[parameters('allocationMethod')]"
            }
        }
    ]
}

D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\appsettings.Development.json
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\appsettings.json
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.App.exe
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.App.deps.json
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.App.runtimeconfig.json
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.App.runtimeconfig.dev.json
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.App.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\ref\Api.App.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.App.pdb
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.AspNetCore.Authentication.JwtBearer.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.AspNetCore.Authentication.OpenIdConnect.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.IdentityModel.JsonWebTokens.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.IdentityModel.Logging.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.IdentityModel.Protocols.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.IdentityModel.Protocols.OpenIdConnect.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.IdentityModel.Tokens.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.OpenApi.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Swashbuckle.AspNetCore.Swagger.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Swashbuckle.AspNetCore.SwaggerGen.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Swashbuckle.AspNetCore.SwaggerUI.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\System.IdentityModel.Tokens.Jwt.dll
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.csprojAssemblyReference.cache
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.GeneratedMSBuildEditorConfig.editorconfig
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.AssemblyInfoInputs.cache
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.AssemblyInfo.cs
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.csproj.CoreCompileInputs.cache
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.MvcApplicationPartsAssemblyInfo.cs
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.MvcApplicationPartsAssemblyInfo.cache
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\staticwebassets\Api.App.StaticWebAssets.Manifest.cache
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\staticwebassets\Api.App.StaticWebAssets.xml
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\scopedcss\bundle\Api.App.styles.css
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.RazorTargetAssemblyInfo.cache
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.csproj.CopyComplete
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.dll
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\ref\Api.App.dll
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.pdb
D:\GIT\api-retful-dashboard\Api\Api.App\obj\Debug\net5.0\Api.App.genruntimeconfig.cache
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.Data.SqlClient.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.EntityFrameworkCore.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.EntityFrameworkCore.Abstractions.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.EntityFrameworkCore.Relational.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.EntityFrameworkCore.SqlServer.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.Extensions.DependencyInjection.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.Identity.Client.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\System.Configuration.ConfigurationManager.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\System.Diagnostics.DiagnosticSource.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\System.Runtime.Caching.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\System.Security.Cryptography.ProtectedData.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\unix\lib\netcoreapp3.1\Microsoft.Data.SqlClient.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win\lib\netcoreapp3.1\Microsoft.Data.SqlClient.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win-arm\native\Microsoft.Data.SqlClient.SNI.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win-arm\native\Microsoft.Data.SqlClient.SNI.pdb
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win-arm64\native\Microsoft.Data.SqlClient.SNI.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win-arm64\native\Microsoft.Data.SqlClient.SNI.pdb
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win-x64\native\Microsoft.Data.SqlClient.SNI.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win-x64\native\Microsoft.Data.SqlClient.SNI.pdb
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win-x86\native\Microsoft.Data.SqlClient.SNI.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win-x86\native\Microsoft.Data.SqlClient.SNI.pdb
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win\lib\netstandard2.0\System.Runtime.Caching.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\runtimes\win\lib\netstandard2.0\System.Security.Cryptography.ProtectedData.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.Business.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.Data.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.Business.pdb
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Humanizer.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Microsoft.EntityFrameworkCore.Design.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\Api.Data.pdb
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\AutoMapper.dll
D:\GIT\api-retful-dashboard\Api\Api.App\bin\Debug\net5.0\AutoMapper.Extensions.Microsoft.DependencyInjection.dll

require 'sinatra/base'

require 'onboard/extensions/openssl'

class OnBoard

  module Crypto
    autoload :SSL, 'onboard/crypto/ssl'
  end

  module System
    autoload :Log, 'onboard/system/log'
  end

  module Network
    module OpenVPN
      autoload :VPN, 'onboard/network/openvpn/vpn'
    end
  end

  class Controller < Sinatra::Base

    get '/network/openvpn.:format' do
      vpns = OnBoard::Network::OpenVPN::VPN.getAll()
      OnBoard::Network::OpenVPN::VPN.cleanup_config_files! :vpns => vpns
      format(
        :module => 'openvpn',
        :path => '/network/openvpn/vpn',
        :format => params[:format],
        :objects  => vpns,
        :title  => 'OpenVPN'
      )
    end

    post '/network/openvpn.:format' do
      params['pki'] = 'default' unless params['pki'] =~ /\S/
      params['pki'].strip!
      msg = {:ok => true}
      vpns = OnBoard::Network::OpenVPN::VPN.getAll()
      ssl_pki = Crypto::SSL::PKI.new params['pki']
      certfile = "#{ssl_pki.certdir}/#{params['cert']}.crt"

      begin
        certobj = OpenSSL::X509::Certificate.new(File.read certfile)
        requested_cn = certobj.to_h['subject']['CN']
        # The following check should be done by openvpn, which should exit
        # with a non-zero status... unfortunately it isn't, and you end with
        # two tun interface with same IP addresses! So, a validation is necessary.
        vpns.each do |vpn|
          if vpn.data['remote'].respond_to? :each
            vpn.data['remote'].each do |remote|
              if
                  remote.respond_to? :[]                              and
                  params['remote_host'].respond_to? :[]               and
                  params['remote_host'].map{|x| x.strip}.include?(
                      remote['address'].strip
                  )                                                   and
                  # TODO: use gethostbyname when useful?
                  # NOTE: the two values compared may be IP addresses as well
                  # as DNS host names.
                  params['remote_port'].map{|x| x.strip}.include?(
                      remote['port'].strip
                  )                                                   and
                  vpn.data['cert']['subject']['CN']   == requested_cn

                msg = {
                    :ok => false,
                    :err => 'A client VPN connection to the same server/port and with the same SSL "Common Name" is already running!'
                }
                break
              end
            end
          end
        end
      rescue OpenSSL::X509::CertificateError
        msg = {
            :ok => false,
            :err => "#{$!.class.name}: #{$!.to_s}",
            :err_html => "OpenSSL Certificate error: &ldquo;<code>#{escape_html $!.to_s}</code>&rdquo;"
        }
      rescue Errno::ENOENT
        msg = {
          :ok => false,
          :err => "No Certificate file!",
          :status_http => 400 # Bad Request
        }
      end
      if msg[:ok]
        msg = OnBoard::Network::OpenVPN::VPN.start_from_HTTP_request(params)
      end
      if msg[:ok]
        vpns = OnBoard::Network::OpenVPN::VPN.getAll()
        status(201) # HTTP Created
      elsif msg[:status_http]
        status msg[:status_http]
      else
        status(409) # HTTP Conflict by default
      end
      OnBoard::Network::OpenVPN::VPN.persist_current
      format(
        :module => 'openvpn',
        :path => '/network/openvpn/vpn',
        :format => params[:format],
        :objects  => vpns,
        :msg  => msg,
        :title => 'OpenVPN'
      )
    end

    put '/network/openvpn.:format' do
      vpns = OnBoard::Network::OpenVPN::VPN.getAll()
      msg = OnBoard::Network::OpenVPN::VPN.modify_from_HTTP_request(params)
      sleep 0.3 # diiiirty!
      vpns = OnBoard::Network::OpenVPN::VPN.getAll()
      # Bringin' an OpenVPN connection up is an asynchronous operation,
      # while bringing it down is synchronous.
      if params['start']
        msg[:ok] ? status(202) : status(409)
      elsif params['stop']
        if not msg[:ok] and msg[:stderr]
          status(409)                       # HTTP 'Conflict'
        else
          status(200)                       # HTTP 'OK'
        end
      end
      OnBoard::Network::OpenVPN::VPN.persist_current
      format(
        :module   => 'openvpn',
        :path     => '/network/openvpn/vpn',
        :format   => params[:format],
        :objects  => vpns,
        :msg      => msg,
        :title    => 'OpenVPN'
      )
    end

    get '/network/openvpn/vpn/:vpn_identifier.:format' do
      vpn = OnBoard::Network::OpenVPN::VPN.lookup(
        :any => params[:vpn_identifier]
      )
      if vpn
        format(
          :module   => 'openvpn',
          :path     => '/network/openvpn/vpn/advanced',
          :format   => params[:format],
          :objects  => vpn,
          :title    => "OpenVPN: ##{params[:vpn_identifier]}"
        )
      else
        not_found
      end
    end

    put '/network/openvpn/vpn/:vpn_identifier.:format' do
      vpn = OnBoard::Network::OpenVPN::VPN.lookup(
        :any => params[:vpn_identifier]
      )
      if vpn
        msg = vpn.modify_from_HTTP_request(params)
        vpn = OnBoard::Network::OpenVPN::VPN.lookup(
          :any => params[:vpn_identifier]) # update
        OnBoard::Network::OpenVPN::VPN.persist_current
        format(
          :module   => 'openvpn',
          :path     => '/network/openvpn/vpn/advanced',
          :format   => params[:format],
          :objects  => vpn,
          :msg      => msg,
          :title    => "OpenVPN: ##{params[:vpn_identifier]}"
        )
      else
        not_found
      end
    end

    delete '/network/openvpn/vpn/:vpn_identifier.:format' do
      vpn = OnBoard::Network::OpenVPN::VPN.lookup(
        :any => params[:vpn_identifier]
      )
      if vpn
        vpn.stop(:rmlog, :rmconf)
        OnBoard::Network::OpenVPN::VPN.all_cached.delete vpn
        sleep 0.3 # diiirty!
        redirection = "/network/openvpn.#{params[:format]}"
        status(303)                       # HTTP "See Other"
        headers('Location' => redirection)
        OnBoard::Network::OpenVPN::VPN.persist_current
        # altough the client will be redirected, an entity-body is always returned
        format(
          :path     => '/303',
          :format   => params[:format],
          :objects  => redirection
        )
      else
        not_found
      end

    end

  end

end<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="RunAll" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$(MSBuildProjectDirectory)\Build.tasks" />
    <Import Project="$(MsBuildThisFileDirectory)\nuget.targets" />
    <Import Project="$(MsBuildThisFileDirectory)\7zip.targets" />

    <PropertyGroup>
        <Configuration Condition="$(Configuration) == ''">Debug</Configuration>
        <ProjectRoot>$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\..'))</ProjectRoot>
        <ToolsPath>$(ProjectRoot)\tools\</ToolsPath>
        <XunitPath>$(ProjectRoot)xunit\</XunitPath>
        <ArtifactsPath>$(ProjectRoot)\artifacts\$(Configuration)</ArtifactsPath>
        <ServiceSiteTargetPath Condition="$(ServiceSiteTargetPath) == ''">$(ArtifactsPath)\SiteExtensions\Kudu</ServiceSiteTargetPath>
        <ServiceSiteProject>$(ProjectRoot)\Kudu.Services.Web\Kudu.Services.Web.csproj</ServiceSiteProject>
        <ClientSiteTargetPath Condition="$(ClientSiteTargetPath) == ''">$(ArtifactsPath)\KuduWeb</ClientSiteTargetPath>
        <ClientSiteProject>$(ProjectRoot)\Kudu.Web\Kudu.Web.csproj</ClientSiteProject>
        <TestResultsPath>$(ArtifactsPath)\TestResults</TestResultsPath>
    </PropertyGroup>
    
    <PropertyGroup>
        <!-- When bumping up MajorVersion, make sure to update VersionStartYear to current year -->
        <MajorVersion>95</MajorVersion>
        <VersionStartYear>2019</VersionStartYear>
        
        <!-- Build number is of the format (CurrentYear - VersionStartYear + 1)(2 digit month)(2 digit day) -->
        <MinorVersion>$([MSBuild]::Add(1, $([MSBuild]::Subtract($([System.DateTime]::UtcNow.Year), $(VersionStartYear)))))$([System.DateTime]::UtcNow.ToString("MMdd"))</MinorVersion>
        <Build>$(BUILD_NUMBER)</Build>
        <Version>$(MajorVersion).$(MinorVersion).$(Build)</Version>
    </PropertyGroup>
    
   <ItemGroup>
        <RegexTransform Include="$(ProjectRoot)\Common\CommonAssemblyInfo.cs">
            <Find>\d+\.\d+\.\d+\.\d+</Find>
            <ReplaceWith>$(Version)</ReplaceWith>
        </RegexTransform>
    </ItemGroup>
    
    <Target Name="UpdateVersion" Condition="'$(BUILD_NUMBER)' != ''">
        <RegexTransform Items="@(RegexTransform)" />
    </Target>
    <Target Name="RunAll" DependsOnTargets="UpdateVersion; Ensure7Zip; RestorePackages; Build; RunTests; BuildSites; BuildZips; CopySymbols; BuildNuget" />
    <Target Name="CreateOutputPath">
        <MakeDir Directories="$(ArtifactsPath)\symbols" Condition="!Exists('$(ArtifactsPath)\symbols')" />
        <MakeDir Directories="$(TestResultsPath)" Condition="!Exists('$(TestResultsPath)')" />
    </Target>

    <Target Name="BuildSites">
        <MSBuild Projects="$(ServiceSiteProject)" 
                 Targets="pipelinePreDeployCopyAllFilesToOneFolder" 
                 Properties="_PackageTempDir=$(ServiceSiteTargetPath);
                             AutoParameterizationWebConfigConnectionStrings=false;
                             SolutionDir=$(ProjectRoot)\;"/>
        
        <ItemGroup>
            <ServiceSiteFilesToCopy Include="$(ProjectRoot)\Kudu.Services.Web\bin*\node_modules*\**\*.*" />
            <ServiceSiteFilesToCopy Include="$(ProjectRoot)\Kudu.Services.Web\commit.txt" />
            <ServiceSiteFilesToCopy Include="$(ProjectRoot)\Kudu.Services.Web\scmApplicationHost.xdt" />
            <ServiceSiteFilesToCopy Include="$(ProjectRoot)\Kudu.Services.Web\bin*\Kudu.exe" />
            <ServiceSiteFilesToCopy Include="$(ProjectRoot)\Kudu.Services.Web\bin*\Kudu.exe.config" />
            <ServiceSiteFilesToCopy Include="$(ProjectRoot)\Kudu.Services.Web\bin*\Scripts\*" />
        </ItemGroup>
        
        <Copy SourceFiles="%(ServiceSiteFilesToCopy.FullPath)" DestinationFiles="$(ServiceSiteTargetPath)\%(RecursiveDir)%(Filename)%(Extension)" 
                SkipUnchangedFiles="true" />

        <MSBuild Projects="$(ClientSiteProject)" 
                 Targets="pipelinePreDeployCopyAllFilesToOneFolder" 
                 Properties="_PackageTempDir=$(ClientSiteTargetPath);
                             AutoParameterizationWebConfigConnectionStrings=false;
                             SolutionDir=$(ProjectRoot)\;"/>
    </Target>
  
    <Target Name="RunTests" DependsOnTargets="CreateOutputPath">
        <MsBuild Projects="Build.xunit.targets" Targets="_RunTests" 
                  Properties="Assembly=$(ProjectRoot)\Kudu.Core.Test\bin\$(Configuration)\Kudu.Core.Test.dll;Xml=$(TestResultsPath)\Kudu.Core.Test.XunitResults.xml" />
        <MsBuild Projects="Build.xunit.targets" Targets="_RunTests" 
                  Properties="Assembly=$(ProjectRoot)\Kudu.Services.Test\bin\$(Configuration)\Kudu.Services.Test.dll;Xml=$(TestResultsPath)\Kudu.Services.Test.XunitResults.xml" />
    </Target>
    
    <Target Name="RunFunctionalTests" DependsOnTargets="CreateOutputPath">
        <MsBuild Projects="Build.xunit.targets" Targets="_RunTests" 
                  Properties="Assembly=$(ProjectRoot)\Kudu.FunctionalTests\bin\$(Configuration)\Kudu.FunctionalTests.dll;Xml=$(TestResultsPath)\Kudu.FunctionalTests.XunitResults.xml" />
    </Target>
    
    <Target Name="Build" DependsOnTargets="CreateOutputPath">
        <MSBuild Projects="$(ProjectRoot)\kudu.sln" 
                 Targets="Build"
                 Properties="Configuration=$(Configuration)" />
    </Target>
    
    <Target Name="ReportFxCopResults" Condition=" '$(TEAMCITY_VERSION)' != '' ">
        <ItemGroup>
            <FxCopOutputItems Include="$(ProjectRoot)\**\*.CodeAnalysisLog.xml" />
        </ItemGroup>
        <Message Text="##teamcity[importData type='FxCop' path='%(FxCopOutputItems.Identity)']" 
                     Condition="@(FxCopOutputItems) != '' "/>
    </Target>
    
     <Target Name="BuildZips">
        <PropertyGroup>
          <SourceDirectory>$(ArtifactsPath)\SiteExtensions</SourceDirectory>
          <ZipTargetPath>$(ArtifactsPath)\zip</ZipTargetPath>
          <Exe7Zip>$(MsBuildThisFileDirectory)7zip\7za.exe</Exe7Zip>
        </PropertyGroup> 
        <RemoveDir Directories="$(ZipTargetPath)" Condition=" Exists('$(ZipTargetPath)') " />
        <MakeDir Directories="$(ZipTargetPath)" />
        <!-- 7Zip doesn`t have silent mode, write log into a file to avoid printing too much text onto screen -->
        <Exec Command="&quot;$(Exe7Zip)&quot; a -y -r &quot;$(ZipTargetPath)\Kudu.zip&quot; &quot;$(ArtifactsPath)\SiteExtensions&quot; &gt; &quot;$(ZipTargetPath)\Kudu.zip.log&quot;" />    
        <Copy SourceFiles="$(ProjectRoot)\Setup\DeployPrivateKudu.cmd" DestinationFiles="$(ZipTargetPath)\DeployPrivateKudu.cmd" SkipUnchangedFiles="true" />
     </Target>
      
      <Target Name="BuildNuget" Condition="'$(BUILD_NUMBER)' != ''">
        <PropertyGroup>
          <SourceDirectory>$(ArtifactsPath)\SiteExtensions\Kudu</SourceDirectory>
          <NugetTargetPath>$(ArtifactsPath)\nuget</NugetTargetPath>
        </PropertyGroup>
        <RemoveDir Directories="$(NugetTargetPath)" Condition=" Exists('$(NugetTargetPath)') " />
        <MakeDir Directories="$(NugetTargetPath)" />
        <Exec Command="nuget pack -Properties &quot;version=$(Version);SourceDirectory=$(SourceDirectory)&quot; -OutputDirectory &quot;$(NugetTargetPath)&quot; &quot;$(MsBuildThisFileDirectory)kudu.nuspec&quot;" />
      </Target>

      <Target Name="CopySymbols">
        <ItemGroup>
          <SymbolFilesToCopy Include="$(ProjectRoot)\Kudu.*\obj\$(Configuration)\Kudu*.pdb" />
          <SymbolFilesToCopy Include="$(ProjectRoot)\Kudu.*\obj\x86\$(Configuration)\Kudu*.pdb" />
        </ItemGroup>
        <Copy SourceFiles="%(SymbolFilesToCopy.FullPath)" DestinationFiles="$(ArtifactsPath)\symbols\%(Filename)%(Extension)" SkipUnchangedFiles="true" />
      </Target>
      
</Project>

- name: Upload a Build Artifact
  uses: actions/upload-artifact@v2.2.4
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    
    - name: Setup Go environment
  uses: actions/setup-go@v2.1.4
  with:
    # The Go version to download (if necessary) and use. Supports semver spec and ranges.
    go-version: # optional
    # Whether to download only stable versions
    stable: # optional, default is true
    # Used to pull node distributions from go-versions.  Since there's a default, this is typically not supplied by the user.
    token: # optional, default is ${{ github.token }}
    
    - name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v1.8.2
  with:
    # Optional SDK version to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x
    dotnet-version: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Whether prerelease versions should be matched with non-exact versions (for example 5.0.0-preview.6 being matched by 5, 5.0, 5.x or 5.0.x). Defaults to false if not provided.
    include-prerelease: # optional
    
    - name: Deploy Environment
  # You may pin to the exact commit or the version.
  # uses: parasoft/deploy-environment-action@486e9382c6c2958fcbaad60b895da799d16730c2
  uses: parasoft/deploy-environment-action@1.0.2
  with:
    # CTP URL
    ctpUrl: 
    # CTP Username
    ctpUsername: 
    # CTP Password
    ctpPassword: 
    # Name of the system
    system: 
    # Name of the environment
    environment: 
    # Name of the environment instance to provision
    instance: 
    # Fail action and abort on provisioning failure
    abortOnFailure: # optional
    # Virtual assets in the environment will be replicated on another server
    copyToVirtualize: # optional
    # The environment assets will be copied to a Virtualize server matching this name
    virtServerName: # optional
    # The name for the replicated environment can be used to later destroy the environment
    newEnvironmentName: # optional
    # Duplicate associated data repositories before provisioning
    duplicateDataRepo: # optional
    # Where to duplicate data repository
    duplicateType: # optional
    # The host of the data repository server
    repoHost: # optional
    # The port of the data repository server
    repoPort: # optional
    # The username of the data repository server
    repoUsername: # optional
    # The password of the data repository server
    repoPassword: # optional
    
    - name: Azure SQL Deploy
  uses: Azure/sql-action@v1
  with:
    # Name of the Azure SQL Server name, like Fabrikam.database.windows.net.
    server-name: 
    # The connection string, including authentication information, for the Azure SQL Server database.
    connection-string: 
    # Path to DACPAC file to deploy
    dacpac-package: # optional
    # Path to SQL script file to deploy
    sql-file: # optional
    # In case DACPAC option is selected, additional SqlPackage.exe arguments that will be applied. When SQL query option is selected, additional sqlcmd.exe arguments will be applied.
    arguments: # optional
    
    - name: Azure Functions Action
  uses: Azure/functions-action@v1.4.4
  with:
    # Name of the Azure Function App
    app-name: 
    # Path to package or folder. *.zip or a folder to deploy
    package: # optional, default is .
    # Function app slot to be deploy to
    slot-name: # optional
    # Publish profile (*.publishsettings) file contents with web deploy secrets
    publish-profile: # optional
    # Automatically look up Java function app artifact from pom.xml (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
    respect-pom-xml: # optional, default is false
    # Remove unwanted files defined in .funcignore file (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
    respect-funcignore: # optional, default is false
    # Enable build action from Kudu when the package is deployed onto the function app. This will temporarily change the SCM_DO_BUILD_DURING_DEPLOYMENT setting for this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'enable-oryx-build' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
    scm-do-build-during-deployment: # optional, default is false
    # Use Oryx Build from Kudu when the package is deployed onto the function app. (Linux functions only). This will temporarily change the ENABLE_ORYX_BUILD setting from this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'scm-do-build-during-deployment' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
    enable-oryx-build: # optional, default is false
    
    - name: Azure Machine Learning Compute Action
  uses: Azure/aml-compute@v1.30.0
  with:
    # Paste output of `az ad sp create-for-rbac --name <your-sp-name> --role contributor --scopes /subscriptions/<your-subscriptionId>/resourceGroups/<your-rg> --sdk-auth` as value of secret variable: AZURE_CREDENTIALS
    azure_credentials: 
    # JSON file including the parameters of the compute.
    parameters_file: # default is compute.json
    
    - name: Azure Machine Learning Run Action
  uses: Azure/aml-run@v1.30.0
  with:
    # Paste output of `az ad sp create-for-rbac --name <your-sp-name> --role contributor --scopes /subscriptions/<your-subscriptionId>/resourceGroups/<your-rg> --sdk-auth` as value of secret variable: AZURE_CREDENTIALS
    azure_credentials: 
    # JSON file including the parameters of the run.
    parameters_file: # default is run.json
    
    - name: Azure Functions Action
  uses: Azure/functions-action@v1.4.4
  with:
    # Name of the Azure Function App
    app-name: 
    # Path to package or folder. *.zip or a folder to deploy
    package: # optional, default is .
    # Function app slot to be deploy to
    slot-name: # optional
    # Publish profile (*.publishsettings) file contents with web deploy secrets
    publish-profile: # optional
    # Automatically look up Java function app artifact from pom.xml (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
    respect-pom-xml: # optional, default is false
    # Remove unwanted files defined in .funcignore file (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
    respect-funcignore: # optional, default is false
    # Enable build action from Kudu when the package is deployed onto the function app. This will temporarily change the SCM_DO_BUILD_DURING_DEPLOYMENT setting for this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'enable-oryx-build' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
    scm-do-build-during-deployment: # optional, default is false
    # Use Oryx Build from Kudu when the package is deployed onto the function app. (Linux functions only). This will temporarily change the ENABLE_ORYX_BUILD setting from this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'scm-do-build-during-deployment' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
    enable-oryx-build: # optional, default is false
    
    - name: data-factory-deploy
  uses: Azure/data-factory-deploy-action@v1.0.2
  with:
    # Data Factory resource group name
    resourceGroupName: 
    # Data factory name
    dataFactoryName: 
    # ARM template file name
    armTemplateFile: # optional, default is ARMTemplateForFactory.json
    # ARM template parameters file name
    armTemplateParametersFile: # optional, default is ARMTemplateParametersForFactory.json
    # Parameters which will be replaced in the ARM template
    additionalParameters: # optional, default is 
    
    - name: Upload a Build Artifact to Azure Blob Storage
  # You may pin to the exact commit or the version.
  # uses: fixpoint/azblob-upload-artifact@71a382e10a29347d552e76a843d2d10a8d0024c7
  uses: fixpoint/azblob-upload-artifact@v4
  with:
    # Connection string
    connection-string: 
    # Artifact name
    name: 
    # Directory containing files to upload
    path: 
    # Container name
    container: # optional, default is github-action-artifacts
    # Remove all blobs under the target blob (use "true" to enable this option)
    cleanup: # optional, default is false
    - name: Azure CLI Action
  uses: Azure/cli@1.0.4
  with:
    # Specify the script here
    inlineScript: 
    # Azure CLI version to be used to execute the script. If not provided, latest version is used
    azcliversion: # optional, default is latest
    
    - name: NPM install cache
  # You may pin to the exact commit or the version.
  # uses: c-hive/gha-npm-cache@2de807f96074eec2c36c2d321c20724cd04112dd
  uses: c-hive/gha-npm-cache@v1
  with:
    # Directory containing package-lock.json
    directory: # optional, default is .
- name: Azure DevOps NPM
  # You may pin to the exact commit or the version.
  # uses: ponicode/azure-devops-npm-action@4053172f755545f9635d2e083514c83fb2e41a95
  uses: ponicode/azure-devops-npm-action@1.0.0
  with:
    # Your Azure organisation
    organisation: 
    # Your Azure project
    project: 
    # Your Azure registry
    registry: 
    # Your Azure user
    user: 
    # Your Azure password
    password: 
    # Your Azure email
    email: 
    # Your package scope
    scope: # optional
       
- name: Setup Node.js environment
  uses: actions/setup-node@v2.4.0
  with:
    # Set always-auth in npmrc
    always-auth: # optional, default is false
    # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
    node-version: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN
    registry-url: # optional
    # Optional scope for authenticating against scoped registries
    scope: # optional
    # Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user.
    token: # optional, default is ${{ github.token }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
    # Deprecated. Use node-version instead. Will not be supported after October 1, 2019
    version: # optional
- name: Azure Functions Action
  uses: Azure/functions-action@v1.4.4
  with:
    # Name of the Azure Function App
    app-name: 
    # Path to package or folder. *.zip or a folder to deploy
    package: # optional, default is .
    # Function app slot to be deploy to
    slot-name: # optional
    # Publish profile (*.publishsettings) file contents with web deploy secrets
    publish-profile: # optional
    # Automatically look up Java function app artifact from pom.xml (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
    respect-pom-xml: # optional, default is false
    # Remove unwanted files defined in .funcignore file (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
    respect-funcignore: # optional, default is false
    # Enable build action from Kudu when the package is deployed onto the function app. This will temporarily change the SCM_DO_BUILD_DURING_DEPLOYMENT setting for this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'enable-oryx-build' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
    scm-do-build-during-deployment: # optional, default is false
    # Use Oryx Build from Kudu when the package is deployed onto the function app. (Linux functions only). This will temporarily change the ENABLE_ORYX_BUILD setting from this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'scm-do-build-during-deployment' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
    enable-oryx-build: # optional, default is false
    
    - name: Azure Functions Container Action
  uses: Azure/functions-container-action@v1.1.0
  with:
    # Name of the Azure Function App
    app-name: 
    # Specify the fully qualified container image(s) name. For example, 'myregistry.azurecr.io/nginx:latest' or 'python:3.7.2-alpine/'.
    image: 
    # Enter the start up command. For ex. 'dotnet run' or '/azure-functions-host/Microsoft.Azure.WebJobs.Script.WebHost'
    container-command: # optional
    # Function app slot to be deploy to
    slot-name: # optional
    
    
